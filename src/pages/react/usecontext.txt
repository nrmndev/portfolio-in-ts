import React from "react";
import WithLineNumbers from "../../utils/code-highlighter";

const exampleCode = `
import React, { useContext } from "react";
import {NavLink} from "react-router-dom";
import AuthContext from '../../store/auth/context';

const AuthContext = React.createContext({
  isLoggedIn: false
})

export default AuthContext
`.trim();

const exampleCode2 = `
import AuthContext from '../../store/auth/context';
import {useState} from "React";

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(true);

  return (
    <AuthContext.Provider value={{isLoggedIn: isLoggedIn}}>
      <MainNav isAuthenticated={isLoggedIn}/>
    </AuthContext.Provider>
  );
}
`.trim();

const exampleCode3 = `
import React from "react";
import {NavLink} from "react-router-dom";
import AuthContext from '../../store/auth/context';

const MainHeader = () => {
  return (
    <AuthContext.Consumer>
    {(ctx)=>{
      <ul>
        {ctx.isLoggedIn && (
          <li><NavLink to={'/users'}>Users</NavLink></li>
        )}
      </ul>
    }}
    </AuthContext.Consumer>
  );
}
`.trim();

const exampleCode4 = `
import React, { useContext } from "react";
import {NavLink} from "react-router-dom";
import AuthContext from '../../store/auth/context';

const MainHeader = () => {
  const autCtx = useContext(AuthContext);

  return (
    <ul>
      {autCtx.isLoggedIn && (
        <li><NavLink to={'/users'}>Users</NavLink></li>
      )}
    </ul>
  );
}
`.trim();

const UseEffectSample = () => {
  return (
    <>
      <p className="color_1">Inside your store</p>
      <WithLineNumbers code={exampleCode} language="jsx" />
      <p className="color_1">Providing Context using PROVIDER</p>
      <WithLineNumbers code={exampleCode2} language="jsx" />
      <p className="color_1">Listening to context via CONSUMER</p>
      <WithLineNumbers code={exampleCode3} language="jsx" />
      <p className="color_1">Consuming Using useContext</p>
      <WithLineNumbers code={exampleCode4} language="jsx" />
    </>
  );
};

export default UseEffectSample;
